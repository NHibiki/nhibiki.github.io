<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title>Yuuno Blog | mBed: 文件床服务器下行问题以及解决方案</title>
<icon>https://yuuno.cc//favicon.jpg</icon>
<link href="https://yuuno.cc/feeds/mbed-cdn.rss" rel="self"/>
<link href="https://yuuno.cc/articles/mbed-cdn"/>
<updated>2018-03-15T14:07:10.000Z</updated>
<id>mbed-cdn</id>
<author>
<name>Yuuno Hibiki</name>
</author>
<generator uri="https://github.com/NHibiki/ReSlice">ReSlice</generator>
<entry>
<title>mBed: 文件床服务器下行问题以及解决方案</title>
<link href="https://yuuno.cc/articles/mbed-cdn"/>
<id>mbed-cdn</id>
<published>2018-03-15T14:07:10.000Z</published>
<updated>2018-03-15T14:07:10.000Z</updated>
<content type="html"><![CDATA[<h3>问题由来</h3><p>前些日子写了一个公开使用的 "文件床" -- mBed (或者叫萌喵也可以 w). 它的地址是 <em>(测试服务器已下线)</em> 一开始, 它只被用于临时的文件托管, 对下行的要求不是怎么严格, 于是, 一个下行为 4M 的服务器也可以轻松应对. 更何况, 在国内,很多服务器都不限制下行 (比如窝使用的 <code>QCloud</code> 的顶峰下行甚至可以到 12MByte/s 也就是约等于 100Mbps 的带宽). 如果上传的文件不大, 并且调用时间相对碎片化, 还是不用太担心上行问题的.</p><p>但是, 后来随着 mBed API 被很多服务 (大多数是 Software Engineering 的项目). 尤其是迁入了 <code>avatar</code> 服务, 以兆为计的文件一下子就让文件床遇到了上行瓶颈. 于是, 就有了之后的研究, 以及这篇文章.</p><h3>申明</h3><p>此文章的研究基于 "我很穷, 我没钱, 我没赞助, 我很怕烦" 的前提. 不一定适用于所有情况, 请酌情代入自己的项目进行考量.</p><p>另, 此文章写于 2018 年上旬, 之后或者之前的情况如果与之后的描述不匹配, 请自行忽略.</p><p>喵.</p><h3>正文</h3><p>首先, 先对自己的产品进行流量测试和预估:</p><ul><li>日访问量约 6k</li><li>集中时段约 13:00 - 15:00, 19:00 - 21:00 各两小时</li><li>文件均类型以及大小 (图片: 0.5MB, 二进制: 8MB)</li><li>文件调用频率 (图片: 约 2百次/天, 二进制: 小于 1次/天)</li><li>文件使用场景 (图片: 直接展示, 二进制: 下载)</li></ul><p>然后, 开始想办法: </p><h4>方案一</h4><p>首先想到的是接入 CDN, 现在国内知名的 CDN 有 Qiniu, upyun, QingCloud 等等. 包括 QCloud 也有自己的 COS 对象存储服务. 考量了这些云之后发现, 国内的下载流量真 TM 贵. 按照上面的公式计算下来, 一个月大约需要 100GB 的流量. 这个数字我还是不太愿意看到的 TAT, 拒绝 (</p><h4>方案二</h4><p>其次是选择境外服务器, 因为如果仅仅是对象存储, 对网络延迟以及稳定性要求不是特别高, 因此只要找到一些拥有 "优质线路" 的伺服器即可. 在这个方案下, 我测试了 VULTR 美东, LINODE 日本, 还有一些其他的伺服器 (当然都是月付小于等于 5刀 的伺服器). 发现, 它们的线路还是非常感人的, 虽然没有带宽限制, 但是对于国内不同的运营商, 速度有巨大的区别. 如果是用 QCloud 和 我校的 企业/学校 级线路去访问, 下行可以到 20Mbps 左右. 但是如果用手机网络 (上海联通4G), 速度慢的估计只有 20KB/s 不到. 所以, 只能, 拒绝 (</p><h4>方案三</h4><p>解决不了网络问题, 那就想想业务本身.</p><p>既然绝大多数日访问都是图片服务, 那我们能不能在图片上下手, 来解决这些问题呢?</p><p>于是, 我对 mBed 后端执行了如下变动. 如果直接通过短链访问签名后的资源, 默认拿到的是图片的缩略图 (只有再加上一个[method=raw]参数, 才会返回源图片). 自动压缩为 宽度为 128px 的图片. (由于是用于手机 APP 的图片显示服务, 对业务几乎没有影响) 这样, 图片均体积从原来的 0.5MB, 直接下降到了 25KB, 变成了原来的 1/20!</p><p>大流量问题解决了, 接下来就是高并发时的流量峰值问题. 由此计算下的图片月流量就由原来的 100GB 下降至 15GB (粗略计算, 因为 SE 的服务会牵扯到比较多的图片下载, 所以不能直接 x 1/20 计算).</p><p>15GB 是一个好数字. 国内大多数 CDN 的免费额度几乎就在 15GB - 20GB 左右. 于是乎, 完全可以使用 CDN 解决并发大流量问题.</p><p>至此, 所有问题解决. 附上最后的流程图 - </p><h5>上传流程</h5><ol><li>上传程序联系 YuunoAuth 拿到一次性认证令牌</li><li>上传程序根据令牌联系 mBed 获取上传地址</li><li>将文件上传到 mBed (位于 QCloud 华东上海)</li><li>收到文件的 mBed 计算 MD5 验证文件完整性, 并构建 thumb</li><li>将 thumb 和 原图 传给 upyun</li><li>上传结束</li></ol><h5>获取流程</h5><ol><li>主程序联系 YuunoAuth 获取阶段性多次使用令牌</li><li>主程序联系 mBed 批量请求文件</li><li>主程序联系根据请求 method, 判断应该发放 thumb 还是 原图片, 并签发 upyun 读取 token</li><li>主程序根据返回链接请求图片</li><li>流程结束</li></ol><p>至此, 这次瓶颈完美解决.</p><p>以上</p>]]></content>
<summary type="html">
问题由来,前些日子写了一个公开使用的&quot;文件床&quot;--mBed(或者叫萌喵也可以w).它的地址是,(测试
</summary>
<category term="Diary" scheme="https://yuuno.cc/categories/Diary"/>
<category term="CDN" scheme="https://yuuno.cc/tags/CDN"/>
</entry>
</feed>