<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title>Yuuno Blog | Deno: The First Trial</title>
<icon>https://yuuno.cc//favicon.jpg</icon>
<link href="https://yuuno.cc/feeds/deno-first-trial.rss" rel="self"/>
<link href="https://yuuno.cc/articles/deno-first-trial"/>
<updated>2020-05-20T18:45:54.484Z</updated>
<id>deno-first-trial</id>
<author>
<name>Yuuno Hibiki</name>
</author>
<generator uri="https://github.com/NHibiki/ReSlice">ReSlice</generator>
<entry>
<title>Deno: The First Trial</title>
<link href="https://yuuno.cc/articles/deno-first-trial"/>
<id>deno-first-trial</id>
<published>2020-05-20T18:45:54.484Z</published>
<updated>2020-05-20T18:45:54.484Z</updated>
<content type="html"><![CDATA[<blockquote><p>已经半年没有更新博客了。（给自己找一些不成文的借口）一方面在这个新冠的特殊时期还要双专业毕业，实属有些忙不过来；另一方面，这学期学的内容，以及给自己安排的项目过于杂乱，导致很长时间没能静下心来提炼一下。</p></blockquote><h3>前语</h3><p>首先，这篇文章是建立在我短暂接触 <em>Deno</em> 正好正式版一周时写的文章。这时候的我还没有开始阅读 <em>Deno</em> 的源码，对于它的见解只是个人的和片面的。或许当我了解 <em>Deno</em> 的结构之后会对它进行重新的评价。</p><h3>介绍</h3><p>什么是 <em>Deno</em>？作者讲的很明白，可以直接去官网了解：<a href="https://deno.land%E3%80%82*Deno*">https://deno.land。<em>Deno</em></a> 的官网（包括网址）即给人一种脱俗的感觉，同时也能看出 Ryan Dahl （设计者）的用心。</p><p>为什么不是 <em>Node 20.0.0</em> 而是 <em>Deno 1.0.0</em>？我相信大多数尝鲜者的博客都有类似的回答了：因为 <em>Node</em> 一发不可收拾的历史原因：越来越多的 <em>TypeScript</em> 信徒，以及令人无法着眼的 <em>node_modules</em> 设计。仅仅如此吗？当然不是。从 <em>Deno 1.0</em> 的特性来看。Ryan Dahl 的野心不止于此。我能想到的有如下：</p><ul><li>在脚本语言中，它的同胞们 <em>python</em>，<em>ruby</em> 都进入或者半进入了 <em>*nix</em> 的 distro，然而，<em>Node</em> 因为脚本依赖太过复杂的问题迟迟未能胜任系统脚本的重担。</li><li><em>Node</em> 作为一个服务器软件，它的权限控制是不够的（当然，这虽然被作者提及，但其实是一个非常普遍的问题。我甚至认为这点比较个人色彩）</li><li><em>Node</em> 的包引用，乃至是 <em>API</em> 管理太过混乱。虽然大家都或多或少遵从 <em>ECMAScript</em>，且不说 Async 与 Event 的实现方式不同，它们的表层 <em>API</em> 都有巨大的区别：<em>window对象</em>，<em>CJS/ESM</em> 等等。</li></ul><p>这和 Ryan Dahl 的初衷有别，或者说，原本的 <em>Node</em> 在让事情变得更加复杂，于是，就有了 <em>Deno</em> 的诞生。</p><h3>设计方式</h3><p>由于还没有深入到源码中，这里只能粗谈一下。若有遗漏或者错误的地方，之后会进行补充。</p><p><em>Deno</em> 给人最大的感觉就是：新。</p><p>它引入的几乎都是最新的：<em>Golang</em>，<em>Rust</em>，<em>TypeScript</em>，运行时权限控制和沙箱，单文件，<em>FaaS</em>。</p><p><em>Golang</em> 和 <em>FaaS</em> 可能让人有些疑惑，我会稍微解释下：<em>Deno</em> 最开始是使用 <em>Golang</em> 进行设计的（在 GitHub Repo 中都能看到被遗弃的分支），因此，<em>Deno</em> 的一些概念/API也或多或少借鉴了 <em>Golang</em>，比如 <em>Conn</em>，<em>Dial</em> 的结构和 <em>API</em>。至于 <em>FaaS</em>，我之所以有这种感觉是因为 <em>Deno</em> 把文件看作是一个整体 -- 它可以被认为是唯一的入口，不需要携带额外的配置，具有独立的权限控制和运行环境。这给人的感觉是一个 <em>SingleFile-As-A-Service</em>。虽然我不知道作者是否有意如此设计，不过对于我这个容器的高度使用者来说，这样独立的设计是让我非常中意的。</p><p>另外让人眼前一亮的是，终于有人开始统一 <em>Node</em>(<em>Deno</em>) 与 <em>Browser</em> 的规范了。（这固然是好事，但也是很大的挑战。毕竟他们的场景天差地别。）</p><p><em>Deno</em> 支持，并且只会支持 <em>ESM</em> 的引入方法，可以直接从 <strong>URI</strong> 导入外部库（这与开启了 <code>type=module</code> 的浏览器端 <em>ESM</em> 部分接轨）。这里之所以说是 <strong>URI</strong>，是因为你不仅仅可以从文件系统读取模组，你也可以从网上加载内容。</p><h3>缺陷</h3><p><em>Deno</em> 作为一个新生儿，缺陷看看 <em>GitHub</em> 的 <em>Issue</em> 数目就知道了。虽然它成功迈入了正式版，不过我个人建议还是暂时官网，除非：1. 这是一个团队作业，有大佬撑着；2. 无所谓生态的问题。（虽然 <em>Deno</em> 声称可以完美兼容所有现有编译完全的 <em>ts</em>/<em>js</em> 库，但是，它毕竟还是与 <em>Node</em> 底层 API 就不同，能不能正常使用，就是未知的了，例如，依赖于 <code>fs</code>，<code>crypto</code>的库）</p><p>这里，我仅仅谈谈我的使用上感觉的不足（中间有一些以及纳入 milestone，会在不久的未来不构成问题）：</p><ol><li><strong>URI规范模糊</strong>：虽然官方支持从 <em>URI</em> 导入库，但是 1) <em>URI</em> 是支持资源注册的，比如 <code>s3://</code>，不能只是单方面支援 <code>https://</code>。2) <em>URI</em> 引库也需要 <code>--allow-read</code>，与 <code>--allow-net</code>授权，这（个人认为）是不合理的。权限应该约束在库中的读取行为，而并不是读取库这个行为。</li><li><strong>TS支持欠佳</strong>：虽然 <em>TypeScript</em> 的支持是令人振奋的，单文件的设计又免除了大量的 <em>tsconfig</em> 和 <em>webpack</em>。但是，这意味这 <em>TypeScript</em> 的大部分糖，或者说实验性功能都无法被使用，比如 <em>decorator</em>。于是，除非 <em>Deno</em> 最终可以左右 <em>TypeScript</em> 的生态，不然它永远不可能成为第一 <em>TypeScript</em> 开发工具，而只是一个运行工具（有的甚至无法运行）。</li><li><strong>无法统一管理的依赖</strong>：这是缺点，但也不是。没有统一的依赖管理器意味着你不同文件中引用的可能是不同版本的库（看，又是<code>node_modules</code>的影响），以至于如果需要做大规模的项目，开发者会被强制自我封装一个本地类来确保版本一致性（<code>import</code> 再统一 <code>export</code>）（对不起我无法 cite，在过去两天中我看到 <em>StackOverflow</em> 中有朋友提到过以此作为解决方案，不过我未能在写作时找到）。</li></ol><h3>总结</h3><p>以上就是我于正式版发布一周后写下的使用感受，对于我个人而言，我很喜欢 <em>Deno</em> 的设计和理念，以至于我迫不及待地准备阅读它的源码。但它依旧没能从根本上解决一些问题（或者说只是表面藏匿了曾经的问题）。我相信随着时间的推移，它会是一个不错的服务端 <em>Js/Ts</em> 解释器，但是确实还需要时间。让我们拭目以待。</p>]]></content>
<summary type="html">
已经半年没有更新博客了。（给自己找一些不成文的借口）一方面在这个新冠的特殊时期还要双专业毕业，实属有
</summary>
<category term="Tech" scheme="https://yuuno.cc/categories/Tech"/>
<category term="Deno" scheme="https://yuuno.cc/tags/Deno"/>
<category term="JavaScript" scheme="https://yuuno.cc/tags/JavaScript"/>
<category term="Server" scheme="https://yuuno.cc/tags/Server"/>
</entry>
</feed>